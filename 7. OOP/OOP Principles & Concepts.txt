OOPS(Polymorphism, Abstraction, Encapsulation, Inheritance)

1. Encapsulation: When an object only exposes the selected information
/*Encapsulation: it is a process of making or declaring fields private and providing access through public methods
It is a process of wrapping code and data together into a single unit
Advantages:-
A class can have total control over it's data members
The fields of data members can be made read only or write only.
*/

2. Inheritance: Entities can inherit attributes from other entities
/*Inheritance is a process in which acquiring properties from one type to another type
Advantages: Less Dev time, Less Memory consumption, Improved Performance, Redundancy(Code De-duplication)
private methods cannot be inherited
*/


/*Inheriting a class from multiple base class is known as multiple inheritance - Java doesn't support multiple inheritance
Multiple inheritance can be achieved in java using keyword interface
interface is a mechanism to achieve multiple inheritance in java
interface is a type which act as a bridge between two programs
all methods are public abstract by default in interface, concrete method is not possible in interface
final variables requires initialization
all variables are public static final by default in interface
Interfaces cannot have constructors
a class extends another class, an interface extends another interface but a class implements an interface
Object creation not possible in interface//can't instantiate an interface
*/

3. Abstraction: Hides complex details to reduce complexity
/*Abstraction is a process of hiding the implementation details and showing only functionality to the user
Abstraction is achieved using interface, an empty interface is called marker interface or tag interface
it doesn't contains methods, fields and constants, just used for categorization, ex: Cloneable, Serializable
*/

4. Polymorphism: Entities can have more than one form.
/*Method Overriding(Runtime Polymorphism):creating a non-static method in sub class with same signature as super class non-static method 
Rules
1.inheritance is must
2.Method name, return type, argument must be same as super class method
3.Don't use access modifiers that has less visibility than super class method
Visibility reduces from public->protected->default->private
4.Cannot override private methods 
*/


/*Method Overloading - Compile Time Polymorphism(single symbol to represent multiple different types)
Compiler decides which method to choose based on length and type of arguments
Advantages: Reusability, Loose coupling
*/