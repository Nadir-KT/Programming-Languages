===============================================================================
    Read me file for the RL78 Flash Data Library T01
    and EEPROM Emulation Library T01
===============================================================================
--------------------------------------
the RL78 Flash Data Library T01
--------------------------------------
The Flash Data Library T01 offers the user an easy to use interface to
directly access the data flash. Depending on the target application, the
library can be used standalone or in combination with the EEPROM Emulation
Library T01. Please refer to the documentation for a detailed description.

The following features are supported by the Flash Data Library T01:

Configurable size of user and EEL pool size:                YES
Access authority check (user pool and EEL pool):            YES
Access size (read, write, blank-check, verify):             4 bytes
Access size (erase):                                        1 block (1024 bytes)
Operating modes:                                            Polling
Request/Response-oriented dialog:                           YES
Standby/wakeup feature:                                     NO
Automatic suspend/resume of block-oriented commands:        YES
Automatic priority control for user access:                 YES
Automatic priority control for block- and
                               byte/word-oriented commands: YES
"Read at any time" capability:                              YES
Secure open/close synchronization between FDL and EEL:      YES
EEL support:                                                YES (T01 only)

Please note that in addition to the Flash Data Library T01 there are other
Flash Data Libraries available from Renesas with different feature sets and
resource consumptions.

The following libraries are also provided for download:

- RL78 Flash Data Library T02 (Tiny) 
  (Installer: RENESAS_RL78_EEL-FDL_T02_PACK02_xVxx.exe)
- RL78 Flash Data Library T04 (Pico) 
  (Installer: RENESAS_FDL_RL78_T04E_Vx.xx)
  (Zip file:  RENESAS_FDL_RL78_T04E_IARV2_Vx.xx)
--------------------------------------------
the RL78 EEPROM Emulation Library T01
--------------------------------------------
While many RL78 devices are equipped with Data flash, a direct usage of this
non-volatile memory can be more complex than the usage of classical 
electrically erasable programmable read-only memory (EEPROM), as erases of 
flash memory can only be performed block-wise, i.e. on rather large continuous 
address ranges.
Furthermore, the number of program-erase cycles for each flash block is finite
and demands for effective data management and wear-leveling techniques.

The EEPROM Emulation Library addresses these challenges by providing a
simple-to-use software interface to the developers, encapsulating the detailed
flash management with a framework based on emulated variables. The developer 
can access (read and write) these variables independently in an EEPROM-like 
manner.
This way, the developer can concentrate on the actual functionality of the
application rather than spending time on tedious details of Data Flash access
sequences.

The Renesas RL78 EEPROM Emulation Library Type 01 is provided for the Renesas
and IAR development environments. It is the most feature-rich EEL available
for RL78 devices. In contrast to the EEL Type 02, which was developed for
reduced resource consumption (in terms of Code Flash, Data Flash and RAM),
the maximum manageable data of the EEL Type 01 increases with the number of
flash blocks used for EEPROM emulation.

The EEPROM Emulation Library T01 is characterized as follows:

Used data flash access layer:                           FDL T01
Min. required data flash blocks (1 block = 1024 bytes): 4
Operating modes:                                        enforced,timing,polling
EEL instance size:                                      1 to 255 bytes
Max. data to be stored:                                 Dependent on number of
                                                        used flash blocks and 
                                                        the number and size of 
                                                        variables.
Flash size of 1 byte EEL instance:                      12 bytes:
                                                         --> 1 data byte 
                                                         --> 8 admin. bytes
                                                         --> 3 fill bytes
Flash size of 255 byte EEL instance:                    264 bytes: 
                                                         --> 255 data bytes
                                                         --> 8 admin. bytes
                                                         --> 1 fill bytes
Administrative block management data @ 1 block:         44 bytes
Reset resistance:                                       YES
Blocks rotation (balanced data flash usage):            YES
Background maintenance process:                         YES
Variable ID can be configured by user:                  YES
Can be used in OS:                                      YES


Please note that in addition to the EEPROM Emulation Library T01 there is 
another EEPROM Emulation Library available from Renesas with a different 
feature set and resource consumption.

The following library is also provided for download:

- RL78 EEPROM Emulation Library T02
  (Installer: RENESAS_RL78_EEL-FDL_T02_PACK02_xVxx.exe)


========
Contents
========

  1. Software Corrections and Updates
  2. General Information
  3. File Naming
  4. Supported Devices
  5. Operating Precautions
  6. Support


===================================
1. Software Corrections and Updates
===================================

Installer Changes
-----------------
    EEL_FDL_T01_Pack01
    ------------------
        V2.10
        -----
        - library update containing a fix for the problem the DWP becomes 
           illegal.
            - RL78 EEL T01 V1.15 for Renesas Compiler/Assembler (CA78K0R)
            - RL78 EEL T01 V1.15 for IAR V1.xx Compiler
            - RL78 EEL T01 V1.15 for IAR V2.xx Compiler
        - Difference information of user's manual (UM)
          Please replace the following descriptions on target user's manual 
          with the "Library" part  of "3. File Naming".
           - UM title: Data Flash Access Library Type T01
             Document #: R01US0034ED0101
             Difference: Cover   Installer name 
                         Page 36 "5.3 File Structure"
           - UM title: EEPROM Emulation Library Type T01
             Document #: R01US0128ED0101
             Difference: Cover   Installer name 
                         Page 59,60 "4.2  Installation"
        V2.00
        -----
        - Change to new installer
        - Contains FDL T01 & EEL T01
        - library update for internal improvements
            - RL78 EEL T01 V1.14 for Renesas Compiler/Assembler (CA78K0R)
            - RL78 EEL T01 V1.14 for IAR V1.xx Compiler
            - RL78 EEL T01 V1.14 for IAR V2.xx Compiler
        - Difference information of user's manual (UM)
          Please replace the following descriptions on target user's manual 
          with the "Library" part  of "3. File Naming".
           - UM title: Data Flash Access Library Type T01
             Document #: R01US0034ED0101
             Difference: Cover   Installer name 
                         Page 36 "5.3 File Structure"
           - UM title: EEPROM Emulation Library Type T01
             Document #: R01US0128ED0101
             Difference: Cover   Installer name 
                         Page 59,60 "4.2  Installation"

    FDL (old installer and ZIP package)
    -----------------------------------
        V1.00(ZIP package for IAR V2.xx)
        --------------------------------
        First official IAR V2.xx support for FDL T01 containing the following
        libraries:
            - RL78 FDL T01 for IAR V2.xx environment

        E1.00a(ZIP package for IAR V2.xx)
        ---------------------------------
        engineering release of FDL T01 containing the following libraries:
              - RL78 FDL T01 E1.12a for IAR V2.xx environment

        V1.20
        -----
        update of FDL T01 containing the following libraries:
            - RL78 FDL T01 V1.12 for Renesas environment
            - RL78 FDL T01 V1.12 for IAR V1.xx environment
        - consolidated readme file with library feature description
        - device list updated

        E1.20a
        ------
        engineering release of FDL T01 containing the following libraries:
            - RL78 FDL T01 E1.12a for IAR V1.xx environment (IAR V1.10 only)

        V1.10
        -----
        update of FDL T01 containing the following libraries:
            - RL78 FDL T01 V1.11 for Renesas environment
            - RL78 FDL T01 V1.11 for IAR V1.xx environment
        - device list updated

        V1.00
        -----
        first official release of FDL T01 containing the following libraries:
            - RL78 FDL T01 V1.10 for Renesas environment
            - RL78 FDL T01 V1.10 for IAR V1.xx environment

        V1.00
        -----
        first official IAR V2.xx support for FDL T01 containing the following
        libraries:
            - RL78 FDL T01 for IAR V2.xx environment

        E1.00a
        ------
        engineering release of FDL T01 containing the following libraries:
        - RL78 FDL T01 E1.12a for IAR V2.xx environment

    EEL (old installer and ZIP package)
    -----------------------------------
        V1.14(ZIP package for IAR V1.xx)
        --------------------------------
        - library update containing the following libraries
        - RL78 EEL T01 V1.14 for IAR V1.xx Compiler

        V1.00(ZIP package for IAR V2.xx)
        --------------------------------
        First official IAR V2.xx support for EEL T01 containing the following
        libraries:
            - RL78 EEL T01 for IAR V2.xx environment

        E1.00a(ZIP package for IAR V2.xx)
        ---------------------------------
        engineering release of EEL T01 containing the following libraries:
            - RL78 EEL T01 E1.13a for IAR V2.xx environment

        V1.31
        -----
        - library update containing a fix for potential pool-inconsistency 
          problem
            - RL78 EEL T01 V1.13 for Renesas Compiler/Assembler (CA78K0R)
            - RL78 EEL T01 V1.13 for IAR V1.xx Compiler
        - device list update

        V1.20
        -----
        - library update containing the following libraries
            - RL78 EEL T01 V1.12 for Renesas Compiler/Assembler (CA78K0R)
            - RL78 EEL T01 V1.12 for IAR V1.xx Compiler
        - new devices added
        
        V1.10
        -----
        - library update containing fix for foreground/background data 
          inconsistency bug:
            - RL78 EEL T01 V1.11 for Renesas Compiler/Assembler (CA78K0R)
            - RL78 EEL T01 V1.11 for IAR V1.xx Compiler
        - new devices added

        V1.00
        -----
        - first official release containing the following libraries
            - RL78 EEL T01 V1.10 for Renesas (CA78K0R) environment
            - RL78 EEL T01 V1.10 for IAR V1.xx environment


Library Changes
---------------
    FDL
    ---
        Renesas
        -------
            V1.12
            -----
            - patch included to avoid bus conflicts during concurring DMA 
              transfer and Data Flash read
            - removed unused define in sample file fdl_descriptor.c

            V1.11
            -----
            - HIOSTOP check:
              It is mandatory to have the high-speed on-chip oscillator running 
              when using the data flash.
              A check has been added to the FAL_Init function of the RL78 FDL 
              T01 in order to ensure that the high-speed on-chip oscillator has 
              not been disabled.
            - ES register backup fix:
              During the execution of FAL_Open, the content of the ES register 
              has not been restored correctly.
              This fix is only relevant for assembler users, the C compiler is 
              not affected as it does not rely on the retention of the ES 
              register content.

            V1.10
            -----
            - first official release of RL78 FDL T01

        IAR V1.xx
        ---------
            V1.12
            -----
            - patch included to avoid bus conflicts during concurring DMA 
              transfer and Data Flash read
            - removed unused define in sample file fdl_descriptor.c
            
            E1.12a
            ------
            - engineering version of RL78 FDL T01 containing preliminary patch 
              to avoid conflicts during concurring DMA transfer and Data Flash 
              read

            V1.11
            -----
            - HIOSTOP check:
              It is mandatory to have the high-speed on-chip oscillator running
              when using the data flash.
              A check has been added to the FAL_Init function of the RL78 FDL 
              T01 in order to ensure that the high-speed on-chip oscillator has
              not been disabled.
            - ES register backup fix:
              During the execution of FAL_Open, the content of the ES register 
              has not been restored correctly.
              This fix is only relevant for assembler users, the C compiler is 
              not affected as it does not rely on the retention of the ES 
              register content.
            - support for devices with rl78_2 core (F14/F13/G14) added
              (IAR V1.20 only)

            V1.10
            -----
            - first official release of RL78 FDL T01

        IAR V2.xx
        ---------
            V1.12
            -----
            - first official release of RL78 FDL T01

            E1.12a
            ------
            - first engineering release of RL78 FDL T01

    EEL
    ---
        Renesas
        -------
            V1.15
            -----
            - fix for the DWP becomes illegal when data writing is interrupted
              by RESET or power is momentarily turned off
              (detailed description I3)

            V1.14
            -----
            - internal improvements

            V1.13
            -----
            - fix for pool inconsistency problem at STARTUP after multiple WRITE
              commands are systematically interrupted by RESET before their 
              reference entry is completely written (detailed description I1)
            - fix for uninitialized RAM/RAM parity error resulting in RESET 
              during the execution of EEL_Init (detailed description I2)

            V1.12
            -----
            - internal improvements

            V1.11
            -----
            - foreground/background data inconsistency bug fixed
            - improved startup sequence (shorter response time)
            - added register retention for ES and CS (assembler API)

            V1.10
            -----
            - first official release

        IAR V1.xx
        ---------
            V1.15
            -----
            - fix for the DWP becomes illegal when data writing is interrupted
              by RESET or power is momentarily turned off
              (detailed description I3)
            
            V1.14
            -----
            - internal improvements

            V1.13
            -----
            - fix for pool inconsistency problem at STARTUP after multiple WRITE
              commands are systematically interrupted by RESET before their 
              reference entry is completely written (detailed description I1)
            - fix for uninitialized RAM/RAM parity error resulting in RESET 
              during the execution of EEL_Init (detailed description I2)

            V1.12
            -----
            - internal improvements

            V1.11
            -----
            - foreground/background data inconsistency bug fixed
            - improved startup sequence (shorter response time)
            - corrected segment switching in C examples
          
            V1.10
            -----
            - first official release

        IAR V2.xx
        ---------
            V1.15
            -----
            - fix for the DWP becomes illegal when data writing is interrupted
              by RESET or power is momentarily turned off
              (detailed description I3)

            V1.14
            -----
            - internal improvements

            V1.13
            -----
            - first official release of RL78 EEL T01

            E1.13a
            ------
            - first engineering release of RL78 EEL T01


    Detailed Issue Descriptions
    ---------------------------
        I1) Pool inconsistency after multiple interrupted WRITE commands
        ----------------------------------------------------------------
        Observation:
        The STARTUP command fails with status EEL_ERR_POOL_INCONSISTENT when
        multiple WRITE commands are systematically interrupted by RESET before
        the reference entry is completely written.
        
        Conditions:
        Worst case conditions that have to be simultaneously fulfilled (minimum
        number of resets needed for the error to occur):
        - the current active-head block contains 51 correctly written instances
          of variables of 1 to 4 bytes
        - 45 trials to write a variable are systematically and anomalously
          interrupted by RESET
        - the RESET occurs at the same point in the WRITE command sequence
          (while writing the variable reference)
        (Please note that this worst case consideration aims at the minimum
        number of resets that can cause the problem. In other constellations,
        e.g. the current active-head block contains no variables, more write
        sequences need to be interrupted by a reset in order to create the
        EEL_ERR_POOL_INCONSISTENT error.)
        
        Risk judgment:
        - Error preconditions:
            - at least 45 systematic RESETs occur 
            - during the same step of a WRITE command - reference write
            - always before the reference ID has the chance to be written
              (this implies a period over multiple successive EEL_Handler calls
              during the write sequence)
        - The incidence rate depends on following factors:
            - the probability of systematic RESETs
            - the EEL_Handler() function call frequency:
              If the frequency is high, the time frame in which the RESET needs
              to occur to trigger the problem is very short -> the chance for
              the problem to occur is rather low.
            - the EEL variables size (for larger variable size, the risk is
              lower):
              In case the smallest variable in the defined variable set (EEL
              descriptor) is larger than 221 bytes, the issue should never
              occur.
        - Renesas support experience after 3 years of EEL usage:
            - the issue was observed the 1st time during extensive application
              reset tests
            - EEL has been used by various customers in multiple projects
              without incidents
        - Conclusion:
          Renesas considers the probability to end in a problem caused by the
          issue is extremely low without systematic trigger. However, it is up 
          to the customer to do the final judgment according to the application
          scenario.
        
        I2) Uninitialized RAM/RAM parity error
        --------------------------------------
        Observation:
        In case the RAM parity error detection feature is activated, a reset
        will be generated during the execution of the EEL_Init function.
        Background of the problem is the read/modify/write access to internal
        EEL variable EEL_flags_u16[3].
        Note: When using an IECUBE, the same problem leads to a fail safe break
        "Read uninit. RAM".
        
        Condition:
        The RAM parity error detection feature of RL78 is activated. Please
        note, that this feature is implemented for particular devices only.
        For details, please refer to your target device manual.
        
        Risk judgment:
        The error should be detected during development. A workaround had been 
        proposed in the outdated customer notification (R01TU0034ED0100).

        I3) The DWP become illegal when data writing is interrupted by RESET 
            or power is momentarily turned off
        ---------------------------------------------------------------------
        Observation:
        When the conditions listed below are met, the DWP becomes illegal.
        This may cause following phenomenon.
        - Some EEL data or the DRP is destroyed.
          (only when the existing data is 0xFF).
        - Data writing(WRITE command) does not end if there is insufficient 
          space for data writing in the last active block.
        - The block management area in the EEL block is destroyed.

        Condition:
        - A reset occurs or supply of power is momentarily turned off while 
          the DRP is being written in the process of data writing.
        - The RCS incidentally matches despite writing to the DRP having 
          been incomplete
        - The startup processing is followed by data writing (EEL_WRITE 
          command and maintenance procedure).

        Risk judgment:
         The incidence rate is about under 0.4 ppm under the following 
         conditions:
         - This library is running continuously for 20 years.
         - Approximately 10 us in one round of data writing is assumed 
           applicable to the problem.
         - 100 rounds of data writing take place per one day.
         - A reset or power shutoff occurs 400 times in one year.
         
======================
2. General Information
======================

The precompiled EEL and FDL are delivered for the CA78K0R and IAR
development environments.

Supported compilers are:

Renesas
-------
    Library created on Renesas Compiler (CA78K0R) version:  V1.10
    Library tested on Renesas Compiler (CA78K0R) version:   V1.72<EEL>
    Library tested on Renesas Compiler (CA78K0R) version:   V1.10<FDL>

IAR V1.xx
---------
    Library created on IAR V1.xx  Compiler version:         V1.20
    Library tested on IAR V1.xx  Compiler version:          V1.30<EEL>
    Library tested on IAR V1.xx  Compiler version:          V1.20<FDL>

IAR V2.xx
---------
    Library tested on IAR V2.xx Compiler version:           V2.21<EEL>
    Library tested on IAR V2.xx Compiler version:           V2.20<FDL>


========================================
3. File Naming
========================================

Installer
---------
The installer file has the name RENESAS_RL78_EEL-FDL_Txx_PACKxx_{x}V{y}{z}.exe
    e.g. RENESAS_RL78_EEL-FDL_Txx_PACK01_2V10.exe

    {x} This version digit will be incremented in case of major changes 
        e.g. API changes
    {y} This version digit will be incremented in case of bug fixes and 
        internal improvements
    {z} This version digit will be incremented in case of adding support of 
        new devices

Library
-------
    << Folder: / >>
        Release.txt                 <-  this information file
        support.txt                 <-  library version information file

    <<Folder: Compiler/FDL/lib >>
        fdl.h                       <-  FDL interface definition (C compiler)
                                        DO NOT CHANGE PLEASE
        fdl.inc                     <-  FDL interface definition (assembler)
                                        (Renesas only)
                                        DO NOT CHANGE PLEASE
        fdl_types.h                 <-  FDL header file, FDL types definition
                                        DO NOT CHANGE PLEASE
        fdl.lib, fdl.r87, fdl.a     <-  pre-compiled library file
                                        DO NOT CHANGE PLEASE

    <<Folder: Compiler/FDL/Sample/C >>  (C samples, Renesas and IAR)
        fdl_descriptor.c            <-  descriptor calculation part
                                        DO NOT CHANGE PLEASE
        fdl_descriptor.h            <-  pool configuration part
                                        ADAPT DUE TO REQUIREMENTS
        fdl_sample_linker_file.dr,  <-  sample linker file
        fdl_sample_linker_file.xcl,     ADAPT DUE TO REQUIREMENTS
        fdl_sample_linker_file.icf

    <<Folder: Compiler/FDL/Sample/asm >>   (assembler samples, Renesas only)
        fdl_descriptor.asm          <-  descriptor calculation part
                                        DO NOT CHANGE PLEASE
        fdl_descriptor.inc          <-  pool configuration part
                                        ADAPT DUE TO REQUIREMENTS
        fdl_sample_linker_file.dr   <-  sample linker file
                                        ADAPT DUE TO REQUIREMENTS
  
    << Folder: Compiler/EEL/lib >>
        eel.h                       <-  EEL interface definition (C compiler)
                                        DO NOT CHANGE PLEASE
        eel.inc                     <-  EEL interface definition (assembler)
                                        (Renesas only)
                                        DO NOT CHANGE PLEASE
        eel_types.h                 <-  EEL types definition (C compiler)
                                        DO NOT CHANGE PLEASE
        eel_types.inc               <-  EEL types definition (assembler)
                                        (Renesas only)
                                        DO NOT CHANGE PLEASE
        eel.lib, eel.r87, eel.a     <-  precompiled library file
                                        DO NOT CHANGE PLEASE

    << Folder: Compiler/EEL/Sample/C >>    (C samples, Renesas, IAR)
        eel_descriptor.h            <-  sample descriptor, configuration part
                                        ADAPT DUE TO REQUIREMENTS
        eel_descriptor.c            <-  sample descriptor, calculation part
                                        ADAPT DUE TO REQUIREMENTS
        eel_user_types.h            <-  user types, configuration part
                                        ADAPT DUE TO REQUIREMENTS
        eel_sample_linker_file.dr,  <-  linker sample file
        eel_sample_linker_file.xcl,     ADAPT DUE TO REQUIREMENTS
        eel_sample_linker_file.icf

    << Folder: Compiler/EEL/Sample/asm >>  (assembler samples, Renesas only)
        eel_descriptor.inc          <-  sample descriptor, configuration part
                                        ADAPT DUE TO REQUIREMENTS
        eel_descriptor.asm          <-  sample descriptor, calculation part
                                        ADAPT DUE TO REQUIREMENTS
        eel_sample_linker_file.dr   <-  linker sample file
                                        ADAPT DUE TO REQUIREMENTS

 How to integrate(EEL)
 ---------------------
    1) copy all the files into your project subdirectory
    2) add all eel*.* files into your project (workbench or make-file)
       Attention: For C-Compiler project (eel_descriptor.c/eel_descriptor.h/
                  eel_user_types.c)
                  For Assembler  project (eel_descriptor.asm/eel_descriptor.inc)
    3) add the FDL library into your project and configure the pool
    4) adapt project specific files as follows:
       a) eel_descriptor.h/eel_descriptor.inc:
          - set library storage type, number of variables and threshold
          NOTE: In case the number of variables is changed descriptor in
                eel_descriptor.c/eel_descriptor.asm must be adapted.
       b) eel_user_types.h/eel_descriptor.asm
          - configure the size of each user variable
       c) eel_descriptor.c/eel_descriptor.asm
          - in case of changed number of variables adapt the descriptor due to
          new/deleted variables
    5) adapt the sample linker file to your requirements: at least segments
       EEL_CODE, EEL_CNST, EEL_DATA(except IAR V2.xx), EEL_SDAT, EEL_UDAT, 
       FAL_CODE, FAL_CNST and FAL_DATA should be defined
    6) re-compile the project

How to integrate(FDL)
---------------------
    1) copy all the files into your project subdirectory
    2) add all fdl*.* files into your project (workbench or make-file)
       Attention: For C-Compiler project (fdl_descriptor.c/fdl_descriptor.h)
                  For Assembler  project (fdl_descriptor.asm/fdl_descriptor.inc)
    3) adapt project specific files as follows:
        a) fdl_descriptor.h/fdl_descriptor.inc:
           adapt the pool configuration (please refer to the users manual for
           detailed description)
    4) adapt the sample linker file to your requirements: at least the segments
       FAL_CODE, FAL_CNST and FAL_DATA should be defined
    5) re-compile the project


====================
4. Supported Devices
====================

For the list of devices supported by this flash library please refer to the 
RL78 family self RAM list of the Flash Self Programming Library (R20UT2944xxxx)


========================
5. Operating Precautions
========================

All devices and libraries
-------------------------
    please refer to the related documentation 
    FDL: (R01US0034EDxxxx and R20UT3633EJxxxx)
    EEL: (R01US0128EDxxxx and R20UT3632EJxxxx)

==========
6. Support
==========

In case of any question please do not hesitate to contact:

        Flash Support Team

        Renesas Electronics Europe GmbH
        Arcadiastr. 10
        D-40472 Duesseldorf, Germany

        email: application_support.flash-eu@lm.renesas.com


===============================================================================
    End of read me file for the RL78 Flash Data Library T01
    and EEPROM Emulation Library T01
===============================================================================
