An array of structures is stored in memory at address 0x00102000. Write a function to print the information stored in each element of this array. The length of the array is 10.
 
The structure looks like the following:-
 
struct data {
	int info1;
	int info2;
	char info3[10];
	int info4;
};
 
 
Sample function:
 
void print_structure_array(void)
{
	unsigned char *structure_array_address = 0x00102000;
	// Write the code here to read the structure from memory and print the value of 
	// info1, info2, info3 and info4 
}

----------------------------------------------------------------------------------------------------------

#include <stdio.h>

struct data {
    int info1;
    int info2;
    char info3[10];
    int info4;
};

void print_structure_array(void)
{
    unsigned char *structure_array_address = (unsigned char *)0x00102000;
    int array_length = 10;

    for (int i = 0; i < array_length; ++i)
    {
        // Calculate the address of the current structure in the array
        unsigned char *current_structure_address = structure_array_address + i * sizeof(struct data);

        // Cast the address to a pointer of the structure type
        struct data *current_structure = (struct data *)current_structure_address;

        // Print the information from the current structure
        printf("Element %d:\n", i + 1);
        printf("info1: %d\n", current_structure->info1);
        printf("info2: %d\n", current_structure->info2);
        printf("info3: %s\n", current_structure->info3);
        printf("info4: %d\n", current_structure->info4);
        printf("\n");
    }
}

----------------------------------------------------------------------------------------------------------

int main()
{
    print_structure_array();
    return 0;
}

#include <stdio.h>

struct data {
    int info1;
    int info2;
    char info3[10];
    int info4;
};

void print_structure_array(void) {
    // Pointer to the start of the structure array in memory
    unsigned char *structure_array_address = 0x00102000;

    // Iterate through each structure in the array
    for (int i = 0; i < 10; i++) {
        // Cast the pointer to the current structure
        struct data *current_structure = (struct data *)structure_array_address;

        // Print the information from the current structure
        printf("Structure %d:\n", i + 1);
        printf("  info1: %d\n", current_structure->info1);
        printf("  info2: %d\n", current_structure->info2);
        printf("  info3: %s\n", current_structure->info3);
        printf("  info4: %d\n", current_structure->info4);

        // Move the pointer to the next structure in the array
        structure_array_address += sizeof(struct data);
    }
}

int main(void) {
    print_structure_array();
    return 0;
}

----------------------------------------------------------------------------------------------------------

void print_structure_array(void)
{
    struct data {
        int info1;
        int info2;
        char info3[10];
        int info4;
    };

    // Get the starting address of the array
    unsigned char *structure_array_address = (unsigned char *)0x00102000;

    // Iterate over the array and print the information in each element
    for (int i = 0; i < 10; i++) {
        // Calculate the address of the current element
        unsigned char *current_structure_address = structure_array_address + i * sizeof(struct data);

        // Cast the address to the structure pointer type
        struct data *current_structure = (struct data *)current_structure_address;

        // Print the values of the structure members
        printf("Element %d:\n", i);
        printf("info1: %d\n", current_structure->info1);
        printf("info2: %d\n", current_structure->info2);
        printf("info3: %s\n", current_structure->info3);
        printf("info4: %d\n", current_structure->info4);
        printf("\n");
    }
}

----------------------------------------------------------------------------------------------------------

#include <stdio.h>

struct data {
    int info1;
    int info2;
    char info3[10];
    int info4;
};

void print_structure_array(void)
{
    struct data *structure_array_address = (struct data *)0x00102000;
    int i;
    for (i = 0; i < 10; i++) {
        printf("Element %d:\n", i);
        printf("info1: %d\n", structure_array_address[i].info1);
        printf("info2: %d\n", structure_array_address[i].info2);
        printf("info3: %s\n", structure_array_address[i].info3);
        printf("info4: %d\n", structure_array_address[i].info4);
    }
}

----------------------------------------------------------------------------------------------------------

#include <stdio.h>

struct data {
	int info1;
	int info2;
	char info3[10];
	int info4;
};

void print_structure_array(void)
{
	struct data *structure_array_address = (struct data *)0x00102000;
	int i;

	for(i = 0; i < 10; i++)
	{
		printf("Structure %d:\n", i+1);
		printf("Info1: %d\n", structure_array_address[i].info1);
		printf("Info2: %d\n", structure_array_address[i].info2);
		printf("Info3: %s\n", structure_array_address[i].info3);
		printf("Info4: %d\n\n", structure_array_address[i].info4);
	}
}

----------------------------------------------------------------------------------------------------------

#include <stdio.h>

struct data {
  int info1;
  int info2;
  char info3[10];
  int info4;
};

void print_structure_array(void) {
  struct data *structure_array = (struct data*)0x00102000;
  
  for(int i=0; i<10; i++) {
    printf("Element %d:\n", i);
    printf("info1: %d\n", structure_array[i].info1);
    printf("info2: %d\n", structure_array[i].info2);
    printf("info3: %s\n", structure_array[i].info3);
    printf("info4: %d\n", structure_array[i].info4);
  }
}

----------------------------------------------------------------------------------------------------------

#include <stdio.h>

struct data {
    int info1;
    int info2;
    char info3[10];
    int info4;
};

void print_structure_array(void) {
    unsigned char *structure_array_address = (unsigned char *)0x00102000;
    int array_length = 10;
    int i;

    for (i = 0; i < array_length; i++) {
        struct data *current_structure = (struct data *)(structure_array_address + (i * sizeof(struct data)));

        printf("Element %d:\n", i + 1);
        printf("info1: %d\n", current_structure->info1);
        printf("info2: %d\n", current_structure->info2);
        printf("info3: %s\n", current_structure->info3);
        printf("info4: %d\n", current_structure->info4);
        printf("\n");
    }
}

----------------------------------------------------------------------------------------------------------

#include <stdio.h>

struct data {
    int info1;
    int info2;
    char info3[10];
    int info4;
};

void print_structure_array(void) {
    unsigned char *structure_array_address = (unsigned char *)0x00102000;
    int i;

    for (i = 0; i < 10; i++) {
        struct data *current_structure = (struct data *)(structure_array_address + i * sizeof(struct data));
        printf("Element %d:\n", i + 1);
        printf("info1: %d\n", current_structure->info1);
        printf("info2: %d\n", current_structure->info2);
        printf("info3: %s\n", current_structure->info3);
        printf("info4: %d\n", current_structure->info4);
    }
}

----------------------------------------------------------------------------------------------------------

void print_structure_array(void)
{
  for(int i = 0; i < 10; i++)
  {
    print(structure_array_address[i].Info1, "

----------------------------------------------------------------------------------------------------------