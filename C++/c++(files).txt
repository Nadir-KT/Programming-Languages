--------------
Files in c++
--------------


	--------------------------------------------------------------

	Purpose:Student file, creating file with constructor fucntion 
	--------------------------------------------------------------

	#include <iostream>
	#include <fstream>
	using namespace std ;

	int main()
	{
		char name[20];
		int marks ;
		
		ofstream fout("student.out"); // connect student.out to fout

		// read first student details
		cout<<"Enter Name:";
		cin>>name;

		cout<<"Enter Marks Secured: ";
		cin>>marks;
	
		// write to a  file 
		fout<<name<<endl;
		fout<<marks<<endl;

		// read second student details
		cout<<"Enter Name:";
		cin>>name;

		cout<<"Enter Marks Secured: ";
		cin>>marks;
	
		// write to a  file 
		fout<<name<<endl;
		fout<<marks<<endl;
	
	}



	----------------------------------------------------------------------
	Purpose : student file, read the file student.out
	----------------------------------------------------------------------	

	int main()
	{	
		char name[20];
		int marks ;
		
		ifstream fin("student.out"); // connect student.out to fin

		//read first student details

		fin >> name;
		fin >> marks;
	
		cout <<"Name: "  << name << endl ;
		cout <<"Marks: " << marks << endl;

		//read second student details

		fin >> name;
		fin >> marks;
	
		cout <<"Name: "  << name << endl ;
		cout <<"Marks: " << marks << endl;

		retutn 0;
	}

	-------------------------------------------------------------------------

	Purpose: display file contents using ifstream to input from a file
	-------------------------------------------------------------------------

	#include <fstream>
	#include <iomanip>
	using namespace std;

	int main()
	{
		char ch;
		char filename[25];

		cout<<"Enter Name of the file: " ;
		cin >> filename ;

		// create a file object in read mode 
		ifstream ifile(filename) ;
		if (!ifile)
		{
			cout << "Error opening" << filename << endl ;
			return 1;
		}

		ifile >> resetiosflags(ios::skipws); // do not skip space or new line
		
		while (ifile)  // while EOF not reached
		{
			ifile >> ch ;  // read a character from file
			cout << ch ;   // display character on console	
		}
		return 0;
	}

	-------------------------------------------------------------------------
	Purpose: Reads all the characters entered and stores the same in the file 
	-------------------------------------------------------------------------
d
		
	---------------------------------------------------------------------------
	Purpose: student file, creating, writing, and reading the same
	---------------------------------------------------------------------------

	#include <iostream>
	#include <fstream>
	using namespace std;

	void student_write(int count)
	{
		char name[30];
		int i, marks ;
		
		// create a file, open it in write mode and save data
		ofstream fout ;    		 // create a file object
		fout.open("student.out");  	// connect file object to file
		if ( !fout )
		{
			cout<<"Error: " <<"student.out cannot be opened in write mode" ;
			return ;
		}
		for ( i = 0; i < count ; i++)
		{
			cout<< "Enter Name: ";
			cin >> name ;
	
			cout<< "Enter Marks Secured: " ;
			cin >> marks ;
			
			// write to a file
			fout << name << endl ;
			fout << marks << endl ;


		}
		fout.close();                // disconnect a file
	}

	void student_read()
	{
		char name[30] ;
		int i, marks;

		// create a file , open it in read mode and save data 
		ifstream fin ;      // create a file object
		fin.open("student.out"); // connect file object to file
		
		if ( !fin )
		{
			cout<<"Error: " <<"student.out cannot be opened in write mode" ;
			return ;
		}
		
		while(1)
		{
			fin >> name ;
			fin >> marks ;
			
			if (fin.eof() )
				break ;
			cout << "Name: " << name << endl ;
			cout << "Marks Secured: " << marks << endl ;
		}
		fin.close();        // disconnect a file

	}

	int main()
	{
		int count ;
		
		cout << "How many students  ? " ;
		cin >> count ;

		cout << "Enter student details to be stored .. " << endl ;
		student_Write(count);
		
		cout << "Student details processed from the file ..." << endl;
		student_read();
	
		return 0;
	}
		

	---------------------------------------------------------------------------------------------

	Purpose : File size finding using seekg and tellg 
	---------------------------------------------------------------------------------------------	
	#include <iostream>
	#include <fstream>
	using namespace std;

	int main(int argc, char *argv[])
	{
		if ( argc < 2 ) // no filename is passed
		{
			cout << "Usage: fsize <filename>" ;
			return 1;
		}
		ifstream infile( argv[1] );     // file open in read and write mode 	
		if ( !infile )   // open success
		{
			cout << "Error Opening " << argv[1] << endl ;
			return 1;
		}
		
		infile.seekg(0,ios::end);  // set read pointer to end of file
		cout << "File Size = " << infile.tellg() ;    // read current position
		return 0;
	}

	----------------------------------------------------------------------------------------------

	Purpose : writes and reads characters form the file 
	-----------------------------------------------------------------------------------------------	
	#include <iostream>
	#include <fstream>
	using namespace std;

	int main()
	{
		char c, string[ 75 ] ;

		fstream file("student.txt", ios::in | ios::out);
		cout << "Enter String: " ;
		cin.getline(string, 74);
		for ( int i = 0; string[i]; i++)
			file.put(string[i]);
		file.seekg( 0 );   // seek to the beginning
		cout << "Output String: " ;
		while(1)
		{
			file.get(c) ; // reads a character 
			cout << c ;
		}
	} 
		 
		
	-----------------------------------------------------------------------
	Purpose : copy a file to another file

	-----------------------------------------------------------------------	


	int CopyFile( char *SourceFile, char *DestinationFile)
	{
		fstream infile ;   // source file
		fstream outfile ;  // destination file
		char buff[BUFFERSIZE + 1 ] ;

		// open source file for reading
		infile.open (SourceFile, ios::in | ios::binary );
		if (infile.fail() )
		{
			cout << "Error: " << Sourcefile << "non-existen" ;
			return 1;  // no input file
		}
	
		outfile.open (DestinationFile, ios::in | ios::binary );
		if (outfile.fail() )
		{
			cout << "Error: " << DestinationFile << "unable to open" ;
			return 2;  // cannot be written to a destination file
		}
		while ( !infile.eof() )
		{
			infile.read ( (char *)buff,BUFFSIZE) ;
			outfile.write ( (char *)buff, infile.gcount() );
			if ()
			
		
	