if syntax
---------
if (condition) {
statement(s);
}
-------------------------------
if(a) is equivalent to if(a!=0)
-------------------------------

nested if syntax
----------------
if(condition1) {
   if(condition2) {
      // statement(s) to be executed if the condition2 is true
   }
}

else syntax
-----------
if (condition) {
True statement(s) block;} 
else {
false statement(s) block;}

else if syntax
--------------
if (condition1) {
  // statement(s) to be executed if condition1 is true;
} 
else if (condition2) {
  // statement(s) to be executed if the condition1 is false and condition2 is true;
} 
else {
  // statement(s) to be executed if the condition1 is false and condition2 is false;
}

Short Hand If...Else (Ternary Operator)
---------------------------------------
(condition) ? expressionTrue : expressionFalse;

switch syntax
-------------
switch(expression)
{
case l: 
		statement1;
		break;
case 2: 
		statement2;
		break;
case 3: 
		statement3;
		break;
.
.
.
default: default_statement(s);
}

-------------------------------------------------------------------------------------------------------------------------------------------
The default keyword must be used as the last statement to specify some code to run if there is no case match, and it does not need a break.
-------------------------------------------------------------------------------------------------------------------------------------------
When C reaches a break keyword, it breaks out of the switch block.
------------------------------------------------------------------
The break keyword indicates the end of a particular case. If we do not put the break in each case, then even though the specific case is executed, C's switch will continue to execute all the cases until the end is reached. 
int i = 1;
switch(i)
{
    case 1:    
        printf("A");        // No break
    case 2:
        printf("B");        // No break
    case 3:
        printf("C");
        break;
}

OUTPUT:A B C
The default case is optional. Whenever the expression's value is not matched with any of the cases inside the switch, then the default case will be executed. It is not necessary to use the break keyword after every case. Break keywords should only be used when we want to terminate our case at that time, otherwise we wonâ€™t.

nested switch statements
------------------------
switch (variable)
{
    case 1:
        statement1;
        switch (variable_1)
        {
            case 'A':
					printf("This A is part of inner switch" );
					break;
			case 'B': /* case code */
        }
        break;
    
    case 2:
        statement2;
        switch (variable_2)
        {
            case 'A':
					printf("This A is part of inner switch" );
					break;
			case 'B': /* case code */
        }
        break;

	case x:
        statement(s);
        break;

    default:
        statement;       
        switch (variable_x)
        {
            case 'A':
					printf("This A is part of inner switch" );
					break;
			case 'B': /* case code */
        }
        break;
}
----------------------------------------------------------------------------------------------------------------------------------
Difference between switch and if: if statements can evaluate float conditions. switch statements cannot evaluate float conditions.
Switch case variables can have only int or char and cannot be float or any other data type.
------------------------------------------------------------------------------
Loops can execute a block of code as long as a specified condition is reached.
------------------------------------------------------------------------------
Entry Controlled loops:- while() and for()
Exit Controlled Loops:- do-while()
-----------------------------------------------
while loop syntax
-----------------
while(condition);
{
statement(s);
increment/decrement;
}

do-while loop syntax
--------------------
do {
statement(s);
increment/decrement;
}
while(condition);
----------------------------------------------------------------------------------------------------------------------------------------------------
This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.
----------------------------------------------------------------------------------------------------------------------------------------------------

for loop syntax
---------------
for (initialization; condition; increment/decrement)
{
  statement(s);
}

----------------------------------------------------------------------------------
Comma(,) operator b/w two conditions in a for loop takes && logical implimentation
----------------------------------------------------------------------------------

The Infinite Loop
-----------------
A loop becomes an infinite loop if a condition never becomes false. The for loop is traditionally used for this purpose.
for(;;) is infinite loop & while(1) is also an infinite loop
Other than 0(zero), all other values are considered as true

nested for loop
---------------
for (initialization; condition; increment/decrement)   
{  
    for(initialization; condition; increment/decrement)  
    {  
           // statement(s) of inner loop.  
    }  
    // statement(s) of outer loop.  
}  

nested while loop
-----------------
while(condition)  
{  
    while(condition)  
    {  
         // statement(s) of the inner loop.  
    }  
	// statement(s) of outer loop.  
}

nested do-while loop
--------------------
do {
   statement(s);

   do {
      statement(s);
   }while( condition );

}while( condition );

goto syntax: Forward Jump
-------------------------
|<-goto label_name;
|  statement1;
|  statement2;
|  statementn;
|->label_name: 
   statements;
   
goto syntax: Backward Jump
--------------------------
|->label_name;
|  statements;
|<-goto label_name; 
   statement1;
   statement2;
   statementn;

--------------------
infinite_loop; 
// body statements. 
goto infinite_loop;
--------------------
goto is unconditional jump : The goto statement is discouraged in C, because it alters the sequential flow of logic that is the characteristic of C language.
This word is redundant in C and encourages poor programming style. it is only recommended as a last resort if structured solutions are much more complicated.
--------------------------

break syntax
------------
   for (initialization; condition; increment/decrement)
   {
   statements
   if(condition)
|<-break;
|  statements
|  }
|->statements outside the for loop
-----------------------------------------------------------
The break statement can also be used to jump out of a loop.
-----------------------------------------------------------

continue syntax
---------------
|->for (initialization; condition; increment/decrement)
|  {
|  statements
|  if(condition)
|<-continue;
   statements
   }
   statements outside the for loop
----------------------------------------------------------------------------------------------------------------------------------------------
The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.
----------------------------------------------------------------------------------------------------------------------------------------------
-------------------
In if statement, a single statement can be included without enclosing it into curly braces { ... }
int a = 5;
if(a > 4)
    printf("success");
No curly braces are required in the above case, but if we have more than one statement inside if condition, then we must enclose them inside curly braces.